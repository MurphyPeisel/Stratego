Index: tester.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import arcade\r\nSCREEN_WIDTH = 900\r\nSCREEN_HEIGHT = 700\r\nSCREEN_TITLE = \"Starting Template\"\r\nROW_COUNT = 10\r\nCOLUMN_COUNT = 10\r\nBOARD_RIGHT = 250\r\nBOARD_LEFT = 200\r\nBOARD_BOTTOM = 100\r\nBOARD_TOP = 150\r\nBOARD_MARGIN = 50\r\nclass MyGame(arcade.Window):\r\n    \"\"\"\r\n    Main application class.\r\n\r\n    NOTE: Go ahead and delete the methods you don't need.\r\n    If you do need a method, delete the 'pass' and replace it\r\n    with your own code. Don't leave 'pass' in this program.\r\n    \"\"\"\r\n\r\n    def __init__(self, width, height, title):\r\n        super().__init__(width, height, title)\r\n\r\n        arcade.set_background_color(arcade.color.AVOCADO)\r\n\r\n        # If you have sprite lists, you should create them here,\r\n        # and set them to None\r\n\r\n    def setup(self):\r\n        \"\"\" Set up the game variables. Call to re-start the game. \"\"\"\r\n        # Create your sprites and sprite lists here\r\n        pass\r\n\r\n\r\n\r\n    def on_draw(self):\r\n        \"\"\"\r\n        Render the screen.\r\n        \"\"\"\r\n\r\n        # This command should happen before we start drawing. It will clear\r\n        # the screen to the background color, and erase what we drew last frame.\r\n        self.clear()\r\n\r\n        # Call draw() on all your sprite lists below\r\n\r\n        \r\n        y = 0\r\n        while (y < 10):\r\n            x = 0\r\n            while (x < 10):\r\n                point_list = ((BOARD_LEFT + BOARD_MARGIN*x, BOARD_TOP + BOARD_MARGIN*y),\r\n                    (BOARD_LEFT + BOARD_MARGIN*x, BOARD_BOTTOM + BOARD_MARGIN*y),\r\n                    (BOARD_RIGHT + BOARD_MARGIN*x, BOARD_BOTTOM + BOARD_MARGIN*y),\r\n                    (BOARD_RIGHT + BOARD_MARGIN*x, BOARD_TOP + BOARD_MARGIN*y))\r\n                arcade.draw_polygon_outline(point_list, arcade.color.BLACK, 4)\r\n                x = x + 1\r\n            y = y + 1\r\n    def on_update(self, delta_time):\r\n        \"\"\"\r\n        All the logic to move, and the game logic goes here.\r\n        Normally, you'll call update() on the sprite lists that\r\n        need it.\r\n        \"\"\"\r\n        pass\r\n\r\n    def on_key_press(self, key, key_modifiers):\r\n        \"\"\"\r\n        Called whenever a key on the keyboard is pressed.\r\n\r\n        For a full list of keys, see:\r\n        https://api.arcade.academy/en/latest/arcade.key.html\r\n        \"\"\"\r\n        pass\r\n\r\n    def on_key_release(self, key, key_modifiers):\r\n        \"\"\"\r\n        Called whenever the user lets off a previously pressed key.\r\n        \"\"\"\r\n        pass\r\n\r\n    def on_mouse_motion(self, x, y, delta_x, delta_y):\r\n        \"\"\"\r\n        Called whenever the mouse moves.\r\n        \"\"\"\r\n        pass\r\n\r\n    def on_mouse_press(self, x, y, button, key_modifiers):\r\n        \"\"\"\r\n        Called when the user presses a mouse button.\r\n        \"\"\"\r\n        pass\r\n\r\n    def on_mouse_release(self, x, y, button, key_modifiers):\r\n        \"\"\"\r\n        Called when a user releases a mouse button.\r\n        \"\"\"\r\n        pass\r\n\r\n\r\ndef main():\r\n    \"\"\" Main function \"\"\"\r\n    game = MyGame(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)\r\n    game.setup()\r\n    arcade.run()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tester.py b/tester.py
--- a/tester.py	(revision c2bfe85623aba5b2dc09b1475744676fdfa358a8)
+++ b/tester.py	(date 1709748558224)
@@ -1,4 +1,5 @@
 import arcade
+import esc_menu
 SCREEN_WIDTH = 900
 SCREEN_HEIGHT = 700
 SCREEN_TITLE = "Starting Template"
@@ -25,6 +26,7 @@
 
         # If you have sprite lists, you should create them here,
         # and set them to None
+        self.escape_menu = Escape(self)
 
     def setup(self):
         """ Set up the game variables. Call to re-start the game. """
@@ -44,7 +46,7 @@
 
         # Call draw() on all your sprite lists below
 
-        
+
         y = 0
         while (y < 10):
             x = 0
@@ -64,14 +66,6 @@
         """
         pass
 
-    def on_key_press(self, key, key_modifiers):
-        """
-        Called whenever a key on the keyboard is pressed.
-
-        For a full list of keys, see:
-        https://api.arcade.academy/en/latest/arcade.key.html
-        """
-        pass
 
     def on_key_release(self, key, key_modifiers):
         """
@@ -96,6 +90,59 @@
         Called when a user releases a mouse button.
         """
         pass
+    def on_key_press(self, symbol, modifiers):
+        if symbol == arcade.key.ESCAPE:
+            print("key is pressed")
+            self.escape_menu.show()
+
+
+class Escape(arcade.View):
+    def __init__(self, game_view):
+        super().__init__()
+        self.game_view = game_view
+        self.ui_manager = arcade.gui.UIManager()
+        self.ui_manager.enable()
+
+        self.v_box = arcade.gui.UIBoxLayout()
+
+        back_to_menu_button = arcade.gui.UIFlatButton(text="Back to menu", width=200)
+        self.v_box.add(back_to_menu_button.with_space_around(bottom=20))
+        cancel_button = arcade.gui.UIFlatButton(text="Cancel", width=200)
+        self.v_box.add(cancel_button.with_space_around(bottom=20))
+        exit_button = arcade.gui.UIFlatButton(text="Exit Program", width=200)
+        self.v_box.add(exit_button.with_space_around(bottom=20))
+
+        back_to_menu_button.on_click = self.on_click_back
+        cancel_button.on_click = self.on_click_cancel
+        exit_button.on_click = self.on_click_exit
+
+        self.ui_manager.add(
+            arcade.gui.UIAnchorWidget(
+                anchor_x="center_x", anchor_y="center_y", child=self.v_box
+            )
+        )
+
+    def show(self):
+        self.window.show_view(self)
+
+    def on_click_back(self, event):
+        print("Back to menu pressed")
+        self.game_view.show_view(self.game_view)
+
+    def on_click_cancel(self, event):
+        print("Cancel button pressed")
+        self.ui_manager.purge_ui_elements()
+        self.window.show_view(self.game_view)
+
+    def on_click_exit(self, event):
+        print("Exit button clicked")
+        arcade.close_window()
+
+    def on_show(self):
+        arcade.set_background_color(arcade.color.LIGHT_BLUE)
+
+    # def on_draw(self):
+    #     self.on_draw()
 
 
 def main():
Index: esc_menu.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import arcade\r\nimport arcade.gui\r\nSCREEN_WIDTH = 400\r\nSCREEN_HEIGHT = 200\r\nSCREEN_TITLE = \"Starting Template\"\r\n\r\nclass QuitButton(arcade.gui.UIFlatButton):\r\n    def on_click(self, event: arcade.gui.UIOnClickEvent):\r\n        arcade.exit()\r\nclass escape(arcade.Window):\r\n    def __init__(self, width, height, title):\r\n        super().__init__(width, height, title)\r\n\r\n        arcade.set_background_color(arcade.color.GRAY)\r\n\r\n        self.manager = arcade.gui.UIManager()\r\n        self.manager.enable()\r\n\r\n        self.v_box = arcade.gui.UIBoxLayout()\r\n\r\n        back_to_menu_button = arcade.gui.UIFlatButton(text=\"Back to menu\", width=200)\r\n        self.v_box.add(back_to_menu_button.with_space_around(bottom=20))\r\n        cancel_button = arcade.gui.UIFlatButton(text=\"Cancel\", width=200)\r\n        self.v_box.add(cancel_button.with_space_around(bottom=20))\r\n        exit_button = arcade.gui.UIFlatButton(text=\"Exit Program\", width=200)\r\n        self.v_box.add(exit_button.with_space_around(bottom=20))\r\n\r\n        back_to_menu_button.on_click = self.on_click_back\r\n        cancel_button.on_click = self.on_click_cancel\r\n        exit_button.on_click = self.on_click_exit\r\n\r\n        self.manager.add(\r\n            arcade.gui.UIAnchorWidget(\r\n                anchor_x=\"center_x\",\r\n                anchor_y=\"center_y\",\r\n                child=self.v_box)\r\n        )\r\n\r\n    def on_click_back(self, event):\r\n        print(\"back to menu pressed\")\r\n\r\n    def on_click_cancel(self, event):\r\n        print(\"cancel button pressed\")\r\n\r\n    def on_click_exit(self, event):\r\n        print(\"exit button clicked\")\r\n\r\n\r\n    def on_draw(self):\r\n        \"\"\"\r\n        Render the screen.\r\n        \"\"\"\r\n        self.clear()\r\n        arcade.start_render()\r\n        self.manager.draw()\r\n\r\n    def on_buttonclick(selfself, event):\r\n        print(\"button is clicked\")\r\ndef main():\r\n    \"\"\" Main function \"\"\"\r\n    game = escape(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)\r\n    arcade.run()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/esc_menu.py b/esc_menu.py
--- a/esc_menu.py	(revision c2bfe85623aba5b2dc09b1475744676fdfa358a8)
+++ b/esc_menu.py	(date 1709746157922)
@@ -2,12 +2,12 @@
 import arcade.gui
 SCREEN_WIDTH = 400
 SCREEN_HEIGHT = 200
-SCREEN_TITLE = "Starting Template"
+SCREEN_TITLE = "ecape window"
 
 class QuitButton(arcade.gui.UIFlatButton):
     def on_click(self, event: arcade.gui.UIOnClickEvent):
         arcade.exit()
-class escape(arcade.Window):
+class Escape(arcade.Window):
     def __init__(self, width, height, title):
         super().__init__(width, height, title)
 
@@ -36,6 +36,7 @@
                 child=self.v_box)
         )
 
+
     def on_click_back(self, event):
         print("back to menu pressed")
 
@@ -56,11 +57,15 @@
 
     def on_buttonclick(selfself, event):
         print("button is clicked")
+
+
+
 def main():
     """ Main function """
-    game = escape(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)
+
+    game = Escape(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)
     arcade.run()
 
 
 if __name__ == "__main__":
-    main()
\ No newline at end of file
+     main()
\ No newline at end of file
